probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
no_of_days <- 0
probable <- 1
while(rbinom(n =1 ,size =1, prob =probable ))
{
no_of_days <- no_of_days + 1
probable <- probable - 0.01
}
no_of_days
?setdiff
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
for (i in 2:length(function(n)){
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
for (i in 2:length(function(n))){
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
for (i in 2:(function(n)){
sample(x=c(1,2,3,4,5,6),size = 1,prob = 1/6,2/6,3/6,4/6,5/6,6/6)
sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(n){
if (n=c(2,4,6)){
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
for (i in 2:n){
i <- i-1 + i-2
}
return(i)
}
function(6)
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
for (i in 2:n){
i <- fibbo(i-1) + fibbo(i-2)
}
return(i)
}
function(6)
values <- numeric(length=1000)
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
return(fibbo(n-1) + fibbo(n-2))
}
fibbo(6)
#####
values <- numeric(length=1000)
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
return(fibbo(n-1) + fibbo(n-2))
}
fibbo()
values <- numeric(length=1000)
fibbo <- function(n){
if (n==0 || n==1){
return(1)
}
return(fibbo(n-1) + fibbo(n-2))
}
fibbo(5)
values <- numeric(length=1000)
fibbo <- function(n){
values[1] =1
values[2] =1
for(i in 3:1000){
values[i] = values[i-1] + values[i-2]
}
}
fibbo(5)
values <- numeric(length=1000)
fibbo <- function(n){
values[1] =1
values[2] =1
for(i in 3:1000){
values[i] = values[i-1] + values[i-2]
}
return(values)
}
values <- numeric(length=1000)
fibbo <- function(n){
values[1] =1
values[2] =1
for(i in 3:1000){
values[i] = values[i-1] + values[i-2]
}
return(values)
}
fibbo(5)
values <- numeric(length=1000)
fibbo <- function(n){
values[1] =1
values[2] =1
for(i in 3:n){
values[i] = values[i-1] + values[i-2]
}
return(values)
}
fibbo(5)
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(n){
if (n %in% c(2,4,6)){
return(1)
}
}
function()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
function()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}
}
die()
n<-sample(x=c(1,2,3,4,5,6),size = 1,prob = c(1/6,2/6,3/6,4/6,5/6,6/6))
die <- function(){
if (n %in% c(2,4,6)){
return(1)
}else{
return(0)
}
}
die()
toss <- rbinom(n=15,size = 1,prob = 0.5)
if (sum(toss)>=8){
return("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
}
else{
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
} else{
print("lose")
}
toss <- rbinom(n=15,size = 1,prob = 0.5)
if(sum(toss)>=8){
print("win")
} else{
print("lose")
}
mat <- matrix(c(1),nrow = 5,ncol = 5)
print(mat)
mat <- matrix(c(0:5),nrow = 5,ncol = 5)
mat <- matrix(c(0:5),nrow = 5,ncol = 5)
mat
mat <- matrix(c(0),nrow = 5,ncol = 5)
mat
for(i in 1:5){
mat[i,i]=i
}
mat
?diag
diag(x=1:5,nrow = 5,ncol = 5)
out <- sample(x=1:6,size=1)
mat <- matrix(c(0),nrow = 5,ncol = 5)
mat
append(mat,out)
mat
out <- sample(x=1:6,size=1)
mat <- matrix(c(0),nrow = 10,ncol = 10)
for(i in 1:10){
for(j in 1:10){
mat[i,j]=out
}
}
mat
mat <- matrix(c(0),nrow = 10,ncol = 10)
for(i in 1:10){
for(j in 1:10){
out <- sample(x=1:6,size=1)
mat[i,j]=out
}
}
mat
ques <- function(n,rho){
mat <- matrix(c(rho), nrow = n, ncol = n)
for(i in 1:nrow(mat)){
mat[i,i]=1
}
return(mat)
}
ques(5,0)
ques <- function(n,rho){
mat <- matrix(c(rho), nrow = n, ncol = n)
for(i in 1:nrow(mat)){
mat[i,i]=1
}
return(mat)
}
ques(5,2)
ques <- function(n,rho){
mat <- matrix(c(0), nrow = n, ncol = n)
mat
for(i in 1:nrow(mat)){
for(j in 1:nrow(mat)){
mat[i,j]=rho^(abs(i-j))
}
}
return(mat)
}
ques(5,2)
?Uniform
install.packages("rbenchmark")
library(benchmark)
library(rbenchmark)
nums <- numeric(length = 1e4)
benchmark({
for(i in 1:1e4){
nums[i] <- runif(1,0,1)
}
},{
num <- runif(1e4,0,1)
},replications = 20)
library(rbenchmark)
nums <- numeric(length = 1e4)
benchmark({
for(i in 1:1e4){
nums[i] <- runif(1,0,1)
}
},{
nums <- runif(1e4,0,1)
},replications = 20)
library(rbenchmark)
nums <- numeric(length = 1e4)
benchmark({
for(i in 1:1e4){
nums[i] <- runif(1,0,1)
}
},{
nums <- runif(1e4,0,1)
},replications = 100)
num1 <- numeric(length = 1e3)
num2 <- numeric(length = 1e6)
mat1 <- matrix(runif(100*1000), nrow = 100, ncol = 1000)
mat2 <- matrix(0, nrow = 100, ncol = 1000)
arr <- array(0, dim = c(100,100,100))
object.size(nums1)
object.size(num1)
object.size(num2)
object.size(mat1)
object.size(mat2)
object.size(arr)
install.packages(rvest)
install.packages("rvest")
install.packages("tidyverse")
library(rvest)
library(tidyverse)
?html_table
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
read_table(html)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
print(table)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table <- table %>% select(-``)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table <- table %>% select(-"``")
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[1]
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[2] <- NULL
print(table)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[2] <- NULL
print(table,n=150)
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[2] <- NULL
table[2][1]
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[2] <- NULL
table[2,1]
html <- read_html("https://www.espn.com/tenis/rankings/_/tipo/wta")
table <- html %>% html_element("table") %>% html_table()
table[2] <- NULL
table[3,2]
plot(dog)
setwd("C:/Users/vinay/OneDrive/Desktop/courses/MTH208/worksheet-4-VinayChavan2006-main")
setwd("C:/Users/vinay/OneDrive/Desktop/courses/MTH208/worksheet-4-VinayChavan2006-main")
library(imager)
dog <- load.image("dog.jpeg")
plot(dog)
dog <- load.image("dog.jpeg")
col.mat <- as.array(dog[, ,1, ])
dims <- dim(col.mat)
dims
rot <- array(0, dim = dims)
dims[1]
dims[2]
# Problem 5
# 180 deg means that n x m remains n x m
# and directions are flipped
dog <- load.image("dog.jpeg")
col.mat <- as.array(dog[, ,1, ])
dims <- dim(col.mat)
rot <- array(0, dim = dims)
for(i in 1:dims[1])
{
for(j in 1:dims[2])
{
rot[i, j, ] <- col.mat[dims[1] - i + 1, dims[2] - j + 1, ]
}
}
# Let's plot size by side
par(mfrow = c(1,2))
plot(dog)
plot(as.cimg(rot))
?rotate_xy
library(imager)
dog <- load.image("dog.jpeg")
library(imager)
dog <- load.image("dog.jpeg")
rotate_dog <- rotate_xy(dog,180)
library(imager)
dog <- load.image("dog.jpeg")
rotate_dog <- rotate_xy(dog,180,1,1)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
library(imager)
dog <- load.image("dog.jpeg")
rotate_dog <- rotate_xy(dog,180,100,100)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
?rotate_xy
library(imager)
dog <- load.image("dog.jpeg")
rotate_dog <- rotate_xy(dog,180,640,635)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
library(imager)
dog <- load.image("dog.jpeg")
rotate_dog <- rotate_xy(dog,180,640/2,635/2)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
?rotate_xy
library(imager)
dog <- load.image("dog.jpeg")
dims <- dim(dog)
rotate_dog <- rotate_xy(dog,180,dims[1]/2,dims[2]/2)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
library(imager)
dog <- load.image("dog.jpeg")
dims <- dim(dog)
rotate_dog <- rotate_xy(dog,90,dims[1]/2,dims[2]/2)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
library(imager)
dog <- load.image("dog.jpeg")
dims <- dim(dog)
rotate_dog <- rotate_xy(dog,-90,dims[1]/2,dims[2]/2)
par(mfrow=c(1,2))
plot(dog)
plot(rotate_dog)
?mirror
library(imager)
dog <- load.image("dog.jpeg")
dims <- dim(dog)
rotate_dog <- rotate_xy(dog,-90,dims[1]/2,dims[2]/2)
par(mfrow=c(1,3))
plot(dog)
plot(rotate_dog)
mir<- mirror(dog,"y")
plot(mir)
library(imager)
dog <- load.image("dog.jpeg")
dims <- dim(dog)
rotate_dog <- rotate_xy(dog,-90,dims[1]/2,dims[2]/2)
par(mfrow=c(1,3))
plot(dog)
plot(rotate_dog)
mir<- mirror(dog,"x")
plot(mir)
save.image(mir,"mirror_dog.jpeg")
