print(combined_vector)
vec1 <- (2:99)^2
vec2 <- (2:21)^3
vec3 <- (2:10)^4
vec4 <- (2:6)^5
vec5 <- (2:4)^6
vec6 <- (2:3)^7
vec7 <- (2:3)^8
vec8 <- (2:2)^9
vec9 <- (2:2)^10
vec10 <- (2:2)^11
vec11 <- (2:2)^12
vec12 <- (2:2)^13
combined_vector <- c(vec1, vec2, vec3, vec4, vec5, vec6, vec7, vec8, vec9, vec10, vec11, vec12, vec13)
# View the combined vector
print(combined_vector)
length(unique(combined_vector))
144-17
24+11+6+3+2
100-46
count <- 0
isPrime <- function(n)
{
for(i in 2:n-1)
{
if(n%%i==0)
{
return(0)
}
}
return(1)
}
for(j in 2:199)
{
if(isPrime(j))
{
count <- count + 1
}
}
count
isPrime(7)
isPrime <- function(n)
{
for(i in 2:n-1)
{
if(n%%i==0)
{
return(0)
}
}
return(1)
}
isPrime(23)
isPrime <- function(n)
{
ans <- 1
for(i in 2:n-1)
{
if(n%%i==0)
{
ans <- 0
}
}
return(ans)
}
isPrime(23)
count <- 0
isPrime <- function(n)
{
ans <- 1
for(i in 2:n-1)
{
if(n%%i == 0)
{
print(i)
ans <- 0
}
}
return(ans)
}
isPrime(23)
rm(list = ls())
isPrime <- function(n)
{
ans <- 1
for(i in 2:n-1)
{
if(n %% i == 0)
{
print(i)
ans <- 0
}
}
return(ans)
}
isPrime(23)
isPrime <- function(n)
{
ans <- 1
for(i in 2:n-1)
{
if(n %% i == 0)
{
print(i)
ans <- 0
}
}
return(ans)
}
isPrime(7)
2:6
count <- 0
isPrime <- function(n)
{
ans <- 1
for(p in 2:n-1)
{
if(n %% p == 0)
{
print(p)
ans <- 0
}
}
return(ans)
}
for(j in 2:199)
{
if(isPrime(j))
{
count <- count + 1
}
}
count
isPrime(23)
count <- 0
isPrime <- function(n)
{
ans <- 1
for(p in 2:(n-1))
{
if(n %% p == 0)
{
ans <- 0
}
}
return(ans)
}
for(j in 2:199)
{
if(isPrime(j))
{
count <- count + 1
}
}
count
199/35
199/55
199/65
199/77
199/91
199/143
199/30
199/42
199/66
199/78
199/70
199/14
14*11
14*13
22*13
15*7
15*11
15*13
21*11
6*35
99+66+39+28+18+15
33+19+14+9+7+13+9+6+5+5+3+3+2+2+1
6+4+3+2+2+7
isSquareFree <- function(n)
{
ans <- 1
for(i in 1:100)
{
if(n %% i^2 == 0)
{
ans <- 0
}
}
return(ans)
}
count <- 0
for(i in 2:99)
{
if(isSquareFree(i))
{
count <- count + 1
}
}
count
isSquareFree(19)
isSquareFree <- function(n)
{
ans <- 1
for(i in 1:100)
{
if(n %% i^2 == 0)
{
print(i)
ans <- 0
}
}
return(ans)
}
isSquareFree(19)
isSquareFree <- function(n)
{
ans <- 1
for(i in 2:100)
{
if(n %% i^2 == 0)
{
print(i)
ans <- 0
}
}
return(ans)
}
count <- 0
for(i in 2:99)
{
if(isSquareFree(i))
{
count <- count + 1
}
}
count
isSquareFree <- function(n)
{
ans <- 1
for(i in 2:100)
{
if(n %% i^2 == 0)
{
ans <- 0
}
}
return(ans)
}
count <- 0
for(i in 2:99)
{
if(isSquareFree(i))
{
print(i)
count <- count + 1
}
}
count
prod(1:7)
# Load necessary library
library(ggplot2)
# Define parameters
V0 <- 1  # Peak voltage
omega <- 2 * pi * 50  # Angular frequency for 50 Hz
t <- seq(0, 0.1, by = 0.0001)  # Time vector
# Define input voltage
Vin <- V0 * sin(omega * t)
# Define output voltage
Vout <- ifelse(Vin > 0, Vin, V0)
# Create a data frame for plotting
data <- data.frame(time = t, Vin = Vin, Vout = Vout)
# Plot the voltages
ggplot(data, aes(x = time)) +
geom_line(aes(y = Vin, color = "Input Voltage")) +
geom_line(aes(y = Vout, color = "Output Voltage")) +
labs(title = "Voltage across Capacitor in Series with Ideal Diode",
x = "Time (s)", y = "Voltage (V)") +
scale_color_manual(values = c("Input Voltage" = "blue", "Output Voltage" = "red")) +
theme_minimal()
# Define parameters
omega <- 1  # Angular frequency
t <- seq(0, 10, by = 0.01)  # Time vector
Vin <- sin(omega * t)  # Input AC voltage
# Initialize Vout
Vout <- numeric(length(t))
peak <- 0
# Calculate Vout
for (i in 1:length(t)) {
if (Vin[i] > peak) {
peak <- Vin[i]
}
Vout[i] <- peak
}
# Plotting
plot(t, Vin, type = "l", col = "blue", ylim = c(-1, 1), ylab = "Voltage", xlab = "Time")
lines(t, Vout, col = "red")
legend("topright", legend = c("Vin", "Vout"), col = c("blue", "red"), lty = 1)
library(rvest)
url <- "https://olympics.com/en/paris-2024/medals"
page <- read_html(url)
rm(list = ls())
library(rvest)
url <- "https://olympics.com/en/paris-2024/medals"
page <- read_html(url)
library(rvest)
url <- "https://olympics.com/en/paris-2024/medals"
page <- read_html(url)
url <- "https://olympics.com/en/paris-2024/medals"
page <- read_html(url)
url <- "https://olympics.com/en/paris-2024/medals"
page <- read_html(url)
url <- "https://olympics.com/en/paris-2024/medals"
html <- read_html(url)
library(tidyverse)
library(rvest)
url <- "https://olympics.com/en/paris-2024/medals"
html <- read_html(url)
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://olympics.com/en/paris-2024/medals")
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://www.imdb.com/chart/moviemeter/")
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://olympics.com/en/paris-2024/medals")
html <- read_html("https://www.bbc.com/sport/olympics/paris-2024/medals")
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://olympics.com/en/paris-2024/medals")
ibrary(rvest)
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://olympics.com/en/paris-2024/medals")
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://www.worldometers.info/demographics/life-expectancy/")
life_expectancy <- html %>% html_table()
life_expectancy
library(rvest)
library(tidyverse)
# emotion-srm-1a32gjt
html <- read_html("https://www.worldometers.info/demographics/life-expectancy/")
life_expectancy <- html %>% html_table()
life_expectancy_data <- life_expectancy[[1]]
colnames(life_expectancy_data)[1] = "Rank"
html <- read_html("https://statisticstimes.com/economy/countries-by-projected-gdp.php")
gdp_nominal <- html %>% html_table()
gdp_nominal <- gdp_nominal[[2]]
gdp_nominal
colnames(gdp_nominal) = gdp_nominal[1, ]
gdp_nominal <- gdp_nominal[2: , ]
length(gdp_nominal)
nrow(gdp_nominal)
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) , ]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) , 1:6]
for(i in 2:6)
{
gdp_nominal[i] <- as.numeric(gdp_nominal)
}
html <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)")
gdp_nominal <- html %>% html_table()
gdp_nominal <- gdp_nominal[[3]]
colnames(gdp_nominal) = gdp_nominal[1, ]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,]
for(i in 2:7)
{
gdp_nominal[i] <- as.numeric(gdp_nominal)
}
gdp_nominal
print(n = 100)
print(gdp_nominal,n = 100)
gdp_nominal['Year']
gdp_nominal %>% filter(Forecast != '
—',Year != '
—',Estimate != '
—')
colnames(gdp_nominal) = gdp_nominal[1, ]
colnames(gdp_nominal)[3] = "Year(2024)"
colnames(gdp_nominal)[4] = "Estimate(2024)"
colnames(gdp_nominal)[5] = "Year(2023)"
colnames(gdp_nominal)[6] = "Estimate(2024)"
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,1:6]
gdp_nominal <- gdp_nominal[[3]]
colnames(gdp_nominal) = gdp_nominal[1, ]
colnames(gdp_nominal) = gdp_nominal[1, ]
colnames(gdp_nominal) = gdp_nominal[1, 1:6]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,1:6]
gdp_nominal <- gdp_nominal[[3]]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,1:6]
gdp_nominal <- gdp_nominal[[3]]
gdp_nominal <- html %>% html_table()
gdp_nominal <- gdp_nominal[[3]]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,1:6]
colnames(gdp_nominal) = gdp_nominal[1, 1:6]
colnames(gdp_nominal)[2] = "ForeCast"
colnames(gdp_nominal)[3] = "Year(2024)"
colnames(gdp_nominal)[4] = "Estimate(2024)"
colnames(gdp_nominal)[5] = "Year(2023)"
colnames(gdp_nominal)[6] = "Estimate(2024)"
gdp_nominal %>% filter(Forecast != '
—',Year(2024) != '
—',Estimate(2024) != '
—',Year(2023) != '
—',Estimate(2023) != '
—')
gdp_nominal %>% filter(Forecast != '
—')
html <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)")
gdp_nominal <- html %>% html_table()
gdp_nominal <- gdp_nominal[[3]]
gdp_nominal <- gdp_nominal[2:nrow(gdp_nominal) ,1:6]
colnames(gdp_nominal) = gdp_nominal[1, 1:6]
colnames(gdp_nominal)[2] = "ForeCast"
colnames(gdp_nominal)[3] = "Year(2024)"
colnames(gdp_nominal)[4] = "Estimate(2024)"
colnames(gdp_nominal)[5] = "Year(2023)"
colnames(gdp_nominal)[6] = "Estimate(2024)"
gdp_nominal %>% filter(Forecast != '
—')
gdp_nominal <- gdp_nominal[which(gdp_nominal['ForeCast']!='
—') , ]
gdp_nominal <- gdp_nominal[which(gdp_nominal['Year(2024)']!='
—') , ]
which(gdp_nominal['ForeCast']!='
—')
which(gdp_nominal['ForeCast']!='-')
which(gdp_nominal['ForeCast']!='')
q()
library(ggplot2)
setwd("C:/Users/vinay/OneDrive/Desktop/courses/MTH208/worksheet-12-VinayChavan2006-main")
load("covid.Rdata")
ggplot(india_covid,aes(x = `Cured/Discharged`,y = Death)) +
geom_point(aes(size = `Confirmed Cases`,colour = `State/UT`)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "Confirm Cases")
as.factor(india_covid$Death < mean(india_covid$Death))
avg_deaths <- india_covid[india_covid$Death < mean(india_covid$Death)]
fact <- as.factor(india_covid$Death < mean(india_covid$Death))
fact
Levels(fact)
levels(fact)
levels(fact)[1] = "Below Average"
levels(fact)[2] = "Above Average"
levels(fact)
ggplot(india_covid,aes(x = `Cured/Discharged`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "Confirm Cases")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
geom_text(aes(label = `State/UT`))
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
geom_text(aes(label = `State/UT`),vjust = -1)
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
geom_text(aes(label = `State/UT`),hjust = -1)
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Death
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
geom_text(aes(label = `State/UT`),hjust = -1)
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact)) +
geom_text(aes(label = `State/UT`),hjust = -1)
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
load("covid.Rdata")
fact <- as.factor(india_covid$Death < mean(india_covid$Death))
levels(fact)[1] = "Below Average"
levels(fact)[2] = "Above Average"
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact,text = `State/UT`)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplotly(p, tooltip = "text")
library(ggplotly)
install.packages("ggplotly")
load("covid.Rdata")
fact <- as.factor(india_covid$Death < mean(india_covid$Death))
levels(fact)[1] = "Below Average"
levels(fact)[2] = "Above Average"
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact,text = `State/UT`)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplotly(p, tooltip = "text")
library(ggplotly)
fact <- as.factor(india_covid$Death < mean(india_covid$Death))
levels(fact)[1] = "Below Average"
levels(fact)[2] = "Above Average"
p <- ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact,text = `State/UT`)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplot(p, tooltip = "text")
fact <- as.factor(india_covid$Death < mean(india_covid$Death))
levels(fact)[1] = "Below Average"
levels(fact)[2] = "Above Average"
p <- ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact,text = `State/UT`)) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
ggplotly(p, tooltip = "text")
ggplot(india_covid,aes(x = `State/UT`,y = Death)) +
geom_point(aes(size = Death,colour = fact,text = `State/UT`,tooltip = "text")) +
labs(title = "Covid - 19",caption = "Cured v/s deaths",y = "Deaths",x = "States")
